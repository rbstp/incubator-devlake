FROM --platform=linux/amd64 golang:1.22-bookworm AS builder

# Install build dependencies (matching official DevLake build)
RUN apt-get update && apt-get install -y \
  gcc \
  binutils \
  libfindbin-libs-perl \
  cmake \
  libssh2-1-dev \
  libssl-dev \
  zlib1g-dev \
  pkg-config \
  && rm -rf /var/lib/apt/lists/*

# Set up Go environment for linux/amd64
ENV CGO_ENABLED=1
ENV GOOS=linux
ENV GOARCH=amd64
ENV CC=gcc

# Create app directory
WORKDIR /app

# Copy source code  
COPY backend/ ./backend/

# Navigate to backend directory for build
WORKDIR /app/backend

# Download dependencies
RUN go mod download

# Build the main DevLake binary
RUN go build -o lake ./server

# Build plugins (including our slack plugin)
RUN mkdir -p bin/plugins

# Build key plugins to test compatibility
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/github/github.so ./plugins/github
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/gitlab/gitlab.so ./plugins/gitlab  
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/jira/jira.so ./plugins/jira

# Build refdiff plugin (essential for DevLake projects)
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/refdiff/refdiff.so ./plugins/refdiff

# Build issue_trace plugin (essential for DevLake projects)
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/issue_trace/issue_trace.so ./plugins/issue_trace

# Build DORA plugin (essential for DevLake projects)
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/dora/dora.so ./plugins/dora

# Build org plugin (essential for DevLake projects)
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/org/org.so ./plugins/org

# Build our slack plugin
RUN CGO_ENABLED=1 go build -buildmode=plugin -o bin/plugins/slack/slack.so ./plugins/slack

# Build Python components
WORKDIR /app/backend/python
RUN if [ -f requirements.txt ]; then \
  apt-get update && apt-get install -y python3-dev python3-pip && \
  pip3 install --break-system-packages --no-cache-dir -r requirements.txt && \
  rm -rf /var/lib/apt/lists/*; \
  fi

# Remove problematic Python plugins that cause startup issues
RUN rm -rf plugins/azuredevops* || true

# Clean up any existing plugin binaries to prevent architecture conflicts
RUN rm -rf bin/plugins/* || true

# Stage 2: Final runtime image (matching official DevLake runtime)
FROM --platform=linux/amd64 python:3.9-slim-bookworm

# Install runtime dependencies (matching official DevLake)
RUN apt-get update && \
  apt-get install -y --no-install-recommends \
  python3-dev \
  python3-pip \
  tar \
  pkg-config \
  curl \
  libssh2-1 \
  zlib1g \
  libffi-dev \
  default-libmysqlclient-dev \
  libpq-dev \
  tini \
  git \
  openssh-client \
  corkscrew \
  && apt-get clean && \
  rm -rf /var/lib/apt/lists/* \
  /tmp/* \
  /var/tmp/*

# Create devlake user (matching official DevLake)
RUN useradd -ms /bin/bash -d /app devlake -u 1010
RUN chown -R devlake:devlake /etc/ssl/certs

# Set up application directory
WORKDIR /app

# Copy built artifacts from builder stage
COPY --from=builder /app/backend/lake /app/bin/lake
COPY --from=builder /app/backend/bin/plugins /app/bin/plugins
COPY --from=builder /app/backend/python /app/python
COPY backend/resources /app/resources

# Create necessary directories and set permissions
RUN mkdir -p /app/logs && \
  chown -R devlake:devlake /app

# Switch to devlake user
USER devlake

# Set environment variables
ENV PATH="/app/bin:${PATH}"
ENV PYTHONUNBUFFERED=1

# Expose port
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/ping || exit 1

# Use tini as init system (matching official DevLake)
ENTRYPOINT ["/usr/bin/tini", "--"]

# Start DevLake
CMD ["lake"]
